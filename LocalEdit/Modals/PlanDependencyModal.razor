@inherits LE_ModalBase
<Modal @ref="modalRef" @bind-Visible="@modalVisible" Closing="@OnModalClosing" Opened="@OnModalOpened">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Plan Dependency Edit</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            @*https://blazorise.com/docs/components/validation*@
            @*<Validations Mode="ValidationMode.Manual">*@
            <Validations @ref="validations" Mode="ValidationMode.Manual" ValidateOnLoad=false>
                <Blazorise.ValidationSummary Label="The following errors were found..." />
                @*    <Field>
                    <FieldLabel>Name with validation</FieldLabel>
                    <Validation Validator="ValidationRule.IsNotEmpty">
                    <Blazorise.TextEdit Placeholder="Enter name (validated)">
                    <Feedback>
                    <ValidationNone>Please enter the name.</ValidationNone>
                    <ValidationSuccess>Name is good.</ValidationSuccess>
                    <ValidationError>Enter valid name!</ValidationError>
                    </Feedback>
                    </Blazorise.TextEdit>
                    </Validation>
                    </Field>
                *@
                <Field>

                    <FieldLabel>Dependency Type</FieldLabel>
                    <Validation Validator="ValidationRule.IsNotEmpty">
                    <Select TValue="string" @bind-SelectedValue="@Item.DependencyType">
                            <SelectItem Value="@string.Empty" Disabled>- Select an Item -</SelectItem>
                            <SelectItem Value=@("DATE")>Date</SelectItem>
                        <SelectItem Value=@("OTHER")>Other Item</SelectItem>
                    </Select>
                    </Validation>
                </Field>

                <Field>
                    <FieldLabel>Other Item ID</FieldLabel>
@*                    <Validation Validator="ValidationRule.IsNotEmpty">*@
                        <Select TValue="string" @bind-SelectedValue="@Item.ID">
                        <SelectItem Value="@string.Empty" Disabled>- Select an Item -</SelectItem>
                        @foreach (var item in Items)
                        {
                            <SelectItem Value="@(item.ID)">@(item.Label)</SelectItem>
                        }
                    </Select>
@*                    </Validation>*@
                </Field>

                <Field>
                    <FieldLabel>Start Date</FieldLabel>
@*                    <TextEdit @bind-Text="Item.StartDate" Placeholder="Enter Start Date" />*@

                    <Addons>
                        <Addon AddonType="AddonType.Body">
@*                            <DatePicker @ref="@datePicker" TValue="DateTime?" InputMode="DateInputMode.Date" />*@
                            <DatePicker @ref="@datePicker" DateChanged="@OnDateChanged" TValue="DateTime?" InputMode="DateInputMode.Date" />
                        </Addon>
                        <Addon AddonType="AddonType.End">
                            <Button Color="Color.Light" Clicked="@(()=>datePicker.ToggleAsync())">
                                <Icon Name="IconName.CalendarDay" />
                            </Button>
                        </Addon>
                    </Addons>
                </Field>


            </Validations>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="@CloseModal">Cancel</Button>
            <Button Color="Color.Primary" Clicked="@TryCloseModal">Save</Button>
        </ModalFooter>
    </ModalContent>
</Modal>
