@page "/"
@using BlazorPanzoom;

<PageTitle>Index</PageTitle>

<h1>Hello, world!</h1>

Welcome to your new app.

<SurveyPrompt Title="How is Blazor working for you?" />

<LocalEdit.Shared.BlazorTimer @ref="timerRef" Ticked="@OnTimerTicked" Interval="1000"></LocalEdit.Shared.BlazorTimer>

<h1>@currentTime</h1>

<br />
<LocalEdit.Shared.BigText></LocalEdit.Shared.BigText>
<br />

<LocalEdit.Shared.GitInfoDisplay></LocalEdit.Shared.GitInfoDisplay>

This app will utilize <br />
<ul>
    <li>Blazorise</li>
    <li>Bootstrap 5 Framework (via Blazorise.Bootstrap5)</li>
    <li>Blazorise.TreeView</li>
    <li>Blazored.LocalStorage</li>
    <li>Blazor.DownloadFileFast</li>
    <li>MermaidJS.Blazor</li>
    <li>BlazorPanZoom</li>
    <li>PublishSPAforGitHubPages</li>
    <li>GitInfo</li>
</ul>
 
@*// https://github.com/StardustDL/RazorComponents.Markdown
builder.Services.AddModules(builder =>
{
    builder.UseRazorComponentClientModules().AddMarkdownModule();
});

builder.Services.AddTransient(sp => new HttpClient { BaseAddress = new Uri(builder.HostEnvironment.BaseAddress) });

// https://github.com/StefH/Blazor.DownloadFileFast
builder.Services.AddBlazorDownloadFile();
*@

Try not to mix in anything else.  If you do, include it above<br />

<h2>Theming</h2>
See https://blazorise.com/docs/theming for details<br />

<Blazorise.Bootstrap5.Button Clicked="@(()=>OnThemeColorChanged("#00ff00"))">Change theme</Blazorise.Bootstrap5.Button>

@code{
    string currentTime = "Now";

    BlazorTimer? timerRef = null;


    Task OnTimerTicked()
    {
        //if (fileManagementModalRef.Result == ModalResult.OK)
        //{
        //    Document = (C4Workspace)JsonSerializer.Deserialize(fileManagementModalRef.FileText, typeof(C4Workspace));
        //    InvokeAsync(() => StateHasChanged());
        //}

        currentTime = DateTime.Now.ToString();
        InvokeAsync(() => StateHasChanged());

        return Task.CompletedTask;
    }

    Task OnThemeColorChanged( string value )
    {
        if ( Theme?.ColorOptions != null )
            Theme.ColorOptions.Primary = value;

        if ( Theme?.BackgroundOptions != null )
            Theme.BackgroundOptions.Primary = value;

        if (Theme?.BodyOptions != null)
            Theme.BodyOptions.BackgroundColor = "#0000FF";

        Theme.ThemeHasChanged();

        return Task.CompletedTask;
    }

    [CascadingParameter] Theme Theme { get; set; }


    private double _rangeValue = 1.0;

    private double RangeValue
    {
        get => _rangeValue;
        set
        {
            _rangeValue = value;
            if (_panzoom != null)
                _panzoom.ZoomAsync(value);
        }
    }

    private bool _panEnabled = true;

    private bool PanEnabled
    {
        get => _panEnabled;
        set
        {
            _panEnabled = value;
            if (_panzoom != null)
                _panzoom.SetOptionsAsync(new PanzoomOptions { DisablePan = !_panEnabled });
        }
    }

    private Panzoom? _panzoom{ get; set; }

    private async Task OnZoomInClick(MouseEventArgs args)
    {
        if (_panzoom != null)
            await _panzoom.ZoomInAsync();
        await UpdateSlider();
    }

    private async Task OnZoomOutClick(MouseEventArgs args)
    {
        if (_panzoom != null)
            await _panzoom.ZoomOutAsync();
        await UpdateSlider();
    }

    private async Task OnResetClick(MouseEventArgs args)
    {
        if (_panzoom != null)
            await _panzoom.ResetAsync();
        await UpdateSlider();
    }

    private async Task UpdateSlider()
    {
        if (_panzoom != null)
        {
            var scale = await _panzoom.GetScaleAsync();
            _rangeValue = scale;
        }
    }

}